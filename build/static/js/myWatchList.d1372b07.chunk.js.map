{"version":3,"sources":["components/ContactsLayout/ContactsLayout.js","components/ContactsLayout/ContactsLayout.module.css","components/ContactList/ContactList.module.css","components/ContactListItem/ContactListItem.module.css","components/ContactForm/ContactForm.js","components/ContactForm/ContactForm.module.css","components/ContactFilter/ContactFilter.js","components/ContactFilter/ContactFilter.module.css","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","views/MyWatchListView/MyWatchList.js"],"names":["Layout","children","className","styles","layout","defaultProps","title","module","exports","ContactForm","dispatch","useDispatch","useState","name","setName","number","setNumber","nameInputId","shortid","generate","numberInputId","contacts","useSelector","contactsSelectors","getVisibleContacts","handleChange","e","target","value","toast","error","reset","in","appear","classNames","timeout","unmountOnExit","logo","box","onSubmit","preventDefault","find","contact","contactsOperations","addContact","autoComplete","htmlFor","type","id","onChange","input","placeholder","button","ContactFilter","getFilter","useCallback","contactsActions","changeFilter","label","ContactListItem","onClick","item","fill","ContactList","length","TransitionGroup","component","contactList","map","CSSTransition","deleteContact","MyWatchList","this","props","fetchContacts","autoClose","Component","connect"],"mappings":"wIAAA,kCAIA,SAASA,EAAT,GAA8B,IAAZC,EAAW,EAAXA,SACd,OACE,qBAAKC,UAAWC,IAAOC,OAAvB,SACGH,IAITD,EAAOK,aAAe,CACpBC,MAAO,GACPL,SAAU,IASGD,O,oBCrBfO,EAAOC,QAAU,CAAC,OAAS,iC,oBCA3BD,EAAOC,QAAU,CAAC,YAAc,mC,oBCAhCD,EAAOC,QAAU,CAAC,KAAO,8BAA8B,OAAS,gCAAgC,OAAS,gCAAgC,KAAO,gC,oLCiBjI,SAASC,IACtB,IAAMC,EAAWC,cADmB,EAEZC,mBAAS,IAFG,mBAE7BC,EAF6B,KAEvBC,EAFuB,OAGRF,mBAAS,IAHD,mBAG7BG,EAH6B,KAGrBC,EAHqB,KAK9BC,EAAcC,IAAQC,WACtBC,EAAgBF,IAAQC,WAExBE,EAAWC,YAAYC,IAAkBC,oBAGzCC,EAAe,SAAAC,GAAM,IAAD,EACAA,EAAEC,OAAlBd,EADgB,EAChBA,KAAMe,EADU,EACVA,MAEd,OAAQf,GACN,IAAK,OACHC,EAAQc,GACR,MAEF,IAAK,SACHZ,EAAUY,GACV,MAEF,QACE,OAAOC,IAAMC,MAAM,MAkBnBC,EAAQ,WACZjB,EAAQ,IACRE,EAAU,KAGV,OAAQ,qCACJ,cAAC,IAAD,CACIgB,IAAI,EAAMC,QAAQ,EAClBC,WAAW,OACXC,QAAS,IACXC,eAAa,EAJf,SAKE,oBAAIlC,UAAWC,IAAOkC,KAAtB,yBAIJ,uBAAMnC,UAAWC,IAAOmC,IACtBC,SA9Be,SAAAb,GACnBA,EAAEc,iBACW,KAAT3B,GAAcgB,IAAMC,MAAM,yBAE1BT,EAASoB,MAAK,SAAAC,GAAO,OAAI7B,IAAS6B,EAAQ7B,QAC1CgB,IAAMC,MAAM,4BAIdpB,EAASiC,IAAmBC,WAAW,CAAC/B,OAAME,YAE9CgB,KAoBEc,aAAa,MAFf,UAIC,wBAAOC,QAAS7B,EAAaf,UAAWC,IAAOU,KAA/C,iBAEG,uBACEkC,KAAK,OACLlC,KAAK,OACLmC,GAAI/B,EACJW,MAAOf,EACPoC,SAAUxB,EACVvB,UAAWC,IAAO+C,MAClBC,YAAY,0BAEjB,wBAAOL,QAAS1B,EAAelB,UAAWC,IAAOY,OAAjD,mBAEG,uBACEgC,KAAK,OACLlC,KAAK,SACLmC,GAAI5B,EACJQ,MAAOb,EACPkC,SAAUxB,EACVvB,UAAWC,IAAO+C,MAClBC,YAAY,4BAEZ,wBAAQJ,KAAK,SAAS7C,UAAWC,IAAOiD,OAAxC,iC,oBCpGZ7C,EAAOC,QAAU,CAAC,IAAM,yBAAyB,MAAQ,2BAA2B,OAAS,4BAA4B,KAAO,4B,iCCDhI,sFAce,SAAS6C,IACtB,IAAM3C,EAAWC,cACXiB,EAAQN,YAAYC,IAAkB+B,WAEtCL,EAAWM,uBAAa,SAAA7B,GAAC,OAAIhB,EAAS8C,IAAgBC,aAAa/B,EAAEC,OAAOC,UAAS,CAAClB,IAE5F,OACC,uBACSR,UAAWC,IAAOuD,MAD3B,SAEO,uBACMX,KAAK,OACLnB,MAAOA,EACPqB,SAAUA,EACVpC,KAAK,SACLX,UAAWC,IAAO+C,MAClBC,YAAY,2B,oBC5B5B5C,EAAOC,QAAU,CAAC,MAAQ,6BAA6B,MAAQ,+B,gJCI/D,SAASmD,EAAT,GAAwD,IAA7B9C,EAA4B,EAA5BA,KAAMmC,EAAsB,EAAtBA,GAAIjC,EAAkB,EAAlBA,OAAQ6C,EAAU,EAAVA,QAC3C,OAAQ,mCACA,qBAAa1D,UAAWC,IAAO0D,KAA/B,UACE,mBAAG3D,UAAWC,IAAOU,KAArB,SAA4BA,IAC5B,mBAAGX,UAAWC,IAAOY,OAArB,SAA8BA,IAE9B,wBACEgC,KAAK,SACLa,QAASA,EACT1D,UAAWC,IAAOiD,OAHpB,SAIE,cAAC,IAAD,CAAgBU,KAAK,cARhBd,KAgBnBW,EAAgBtD,aAAe,CAC7BU,OAAQ,GACRF,KAAM,GACNmC,GAAI,MASSW,Q,mCChBA,SAASI,IACtB,IAAMrD,EAAWC,cACXU,EAAWC,YAAYC,IAAkBC,oBAC/C,OAAQ,mCACLH,EAAS2C,OAAS,GACnB,cAACC,EAAA,EAAD,CAAiBC,UAAU,KAAKhE,UAAWC,IAAOgE,YAAlD,SACG9C,EAAS+C,KAAI,gBAAGvD,EAAH,EAAGA,KAAMmC,EAAT,EAASA,GAAIjC,EAAb,EAAaA,OAAb,OACZ,cAACsD,EAAA,EAAD,CAAwBlC,QAAS,IAAKD,WAAW,OAAjD,SACE,cAAC,EAAD,CAAiBrB,KAAMA,EAAMmC,GAAIA,EAAIjC,OAAQA,EAAQ6C,QAAS,kBAAMlD,EAASiC,IAAmB2B,cAActB,QAD5FA,UAa5Be,EAAY1D,aAAe,CACzBgB,SAAU,K,mKC9BNkD,E,uKACJ,WACEC,KAAKC,MAAMC,kB,oBAGb,WACE,OACE,eAAC,IAAD,WACE,cAAC,IAAD,IACA,cAAC,IAAD,IAEA,cAAC,IAAD,CAAgBC,UAAW,OAC3B,cAAC,IAAD,W,GAZkBC,aAsBXC,sBAAS,MAJG,SAAAnE,GAAQ,MAAK,CACxCgE,cAAe,kBAAMhE,EAASiC,IAAmB+B,qBAGlCG,CAAoCN","file":"static/js/myWatchList.d1372b07.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './ContactsLayout.module.css';\r\n\r\nfunction Layout({ children}) {\r\n    return (\r\n      <div className={styles.layout} >\r\n        {children}\r\n      </div>)\r\n}\r\n\r\nLayout.defaultProps = {\r\n  title: '',\r\n  children: '',\r\n};\r\n\r\nLayout.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node,\r\n};\r\n\r\n\r\nexport default Layout;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"layout\":\"ContactsLayout_layout__37Alt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__3Dkb4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactListItem_item__sBCR5\",\"button\":\"ContactListItem_button__3ZzHl\",\"number\":\"ContactListItem_number__2UO1l\",\"name\":\"ContactListItem_name__ylnZ5\"};","import {\r\n    useState\r\n} from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { contactsOperations, contactsSelectors } from \"../../redux/phoneBook/index\";\r\nimport shortid from 'shortid';\r\nimport styles from './ContactForm.module.css';\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport \"../../stylesheets/animation.css\";\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n/*\r\nconst mapStateToProps = state => ({ contacts: contactsSelectors.getVisibleContacts(state)});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: (name, number) => { dispatch(contactsOperations.addContact(name, number)) },\r\n});*/\r\n\r\nexport default function ContactForm() {\r\n  const dispatch = useDispatch();\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  \r\n  const nameInputId = shortid.generate();\r\n  const numberInputId = shortid.generate();\r\n\r\n  const contacts = useSelector(contactsSelectors.getVisibleContacts);\r\n  //const onSubmit = () => { dispatch(contactsOperations.addContact())};\r\n  \r\n  const handleChange = e => {\r\n    const { name, value } = e.target;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n      \r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n      \r\n      default:\r\n        return toast.error('');;\r\n    }\r\n  };\r\n  \r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    if (name === '') {toast.error('Contact details empty')\r\n    }\r\n    if (contacts.find(contact => name === contact.name)) {\r\n        toast.error('Contact is already exist');\r\n    } \r\n    else {\r\n      \r\n      dispatch(contactsOperations.addContact({name, number}));\r\n      };\r\n      reset();\r\n  };\r\n    \r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n    };\r\n    \r\n    return (<>\r\n        <CSSTransition\r\n            in={true} appear={true}\r\n            classNames='logo'\r\n            timeout={500}\r\n          unmountOnExit>\r\n          <h1 className={styles.logo}>Phonebook</h1>\r\n            </CSSTransition>\r\n          \r\n       \r\n      <form className={styles.box}\r\n        onSubmit={handleSubmit}\r\n        autoComplete=\"off\">\r\n        \r\n       <label htmlFor={nameInputId} className={styles.name}>\r\n          Name\r\n          <input\r\n            type='text'\r\n            name='name'\r\n            id={nameInputId}\r\n            value={name}\r\n            onChange={handleChange}\r\n            className={styles.input}\r\n            placeholder='Enter contact name' />\r\n        </label> \r\n       <label htmlFor={numberInputId} className={styles.number}>\r\n          Number\r\n          <input\r\n            type='text'\r\n            name='number'\r\n            id={numberInputId}\r\n            value={number}\r\n            onChange={handleChange}\r\n            className={styles.input}\r\n            placeholder='Enter contact number' />\r\n          </label>\r\n            <button type='submit' className={styles.button}>\r\n              Add contact\r\n            </button>\r\n        </form>\r\n        </>)\r\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"ContactForm_box__H8tPT\",\"input\":\"ContactForm_input__1dg-E\",\"button\":\"ContactForm_button__2A68Y\",\"logo\":\"ContactForm_logo__1WmBh\"};","import React, {useCallback} from 'react';\r\nimport styles from './ContactFilter.module.css';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { contactsSelectors, contactsActions } from \"../../redux/phoneBook\";\r\n\r\n/**const mapStateToProps = (state) => ({\r\n  value: contactsSelectors.getFilter(state)\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: e => dispatch(contactsActions.changeFilter(e.target.value)),\r\n});\r\n */\r\n\r\nexport default function ContactFilter() {\r\n  const dispatch = useDispatch();\r\n  const value = useSelector(contactsSelectors.getFilter);\r\n  \r\n  const onChange = useCallback( e => dispatch(contactsActions.changeFilter(e.target.value)), [dispatch]);\r\n\r\n  return(\r\n   <label\r\n            className={styles.label}>\r\n          <input\r\n                type='text'\r\n                value={value}\r\n                onChange={onChange}\r\n                name='filter'\r\n                className={styles.input}\r\n                placeholder='Enter contact name'\r\n            />\r\n        </label>\r\n  )\r\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"ContactFilter_input__1QbKA\",\"label\":\"ContactFilter_label__1GD0E\"};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './ContactListItem.module.css';\r\nimport { AiOutlineClose } from 'react-icons/ai';\r\n\r\nfunction ContactListItem({ name, id, number, onClick}) {\r\n  return (<>\r\n          <li key={id} className={styles.item}>\r\n            <p className={styles.name}>{name}</p>\r\n            <p className={styles.number}>{number}</p>\r\n            \r\n            <button\r\n              type='button'\r\n              onClick={onClick}\r\n              className={styles.button}>\r\n              <AiOutlineClose fill=\"white\" />\r\n        </button>\r\n          </li>\r\n        \r\n    </>\r\n  );\r\n};    \r\n\r\nContactListItem.defaultProps = {\r\n  number: '',\r\n  name: '',\r\n  id: null,\r\n};\r\n\r\nContactListItem.propTypes = {\r\n  number: PropTypes.string,\r\n  name: PropTypes.string,\r\n    id: PropTypes.string.isRequired\r\n};\r\n\r\nexport default ContactListItem;","import React from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport contactsOperations from \"../../redux/phoneBook/phoneBook-operations\";\r\nimport PropTypes from 'prop-types';\r\nimport styles from './ContactList.module.css';\r\nimport ContactListItem from \"../ContactListItem/ContactListItem\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\nimport \"../../stylesheets/animation.css\";\r\nimport contactsSelectors from \"../../redux/phoneBook/phoneBook-selectors\";\r\n/**\r\nconst mapStateToProps = (state) => ({\r\n    contacts: contactsSelectors.getVisibleContacts(state)\r\n}\r\n);\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onRemoveContact: (id) => dispatch(contactsOperations.deleteContact(id)),\r\n});\r\n*/\r\nexport default function ContactList() {\r\n  const dispatch = useDispatch();\r\n  const contacts = useSelector(contactsSelectors.getVisibleContacts);\r\n  return (<>\r\n    {contacts.length > 0 &&     \r\n    <TransitionGroup component=\"ul\" className={styles.contactList}>\r\n      {contacts.map(({ name, id, number }) => (\r\n        <CSSTransition key={id} timeout={250} classNames=\"item\">\r\n          <ContactListItem name={name} id={id} number={number} onClick={() => dispatch(contactsOperations.deleteContact(id))}>\r\n          </ContactListItem>\r\n        </CSSTransition>\r\n        \r\n        ))\r\n      }\r\n      </TransitionGroup>\r\n    }\r\n    </>\r\n  );\r\n}\r\n  \r\nContactList.defaultProps = {\r\n  contacts: [],\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(PropTypes.shape({\r\n    number: PropTypes.string,\r\n    name: PropTypes.string,\r\n    id: PropTypes.string.isRequired\r\n  }\r\n  ))\r\n};","import React, { Component } from 'react';\r\nimport Layout from '../../components/ContactsLayout/ContactsLayout';\r\nimport { connect } from \"react-redux\";\r\nimport ContactList from '../../components/ContactList/ContactList'\r\nimport ContactForm from '../../components/ContactForm/ContactForm';\r\nimport ContactFilter from '../../components/ContactFilter/ContactFilter';\r\nimport \"../../stylesheets/animation.css\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport { contactsOperations } from \"../../redux/phoneBook\";\r\n\r\nclass MyWatchList extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Layout >\r\n        <ContactForm/>\r\n        <ContactFilter />\r\n        \r\n        <ToastContainer autoClose={2500} />     \r\n        <ContactList />\r\n      </Layout>\r\n    );\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\nfetchContacts: () => dispatch(contactsOperations.fetchContacts())\r\n})\r\n\r\nexport default connect( null, mapDispatchToProps )(MyWatchList);"],"sourceRoot":""}