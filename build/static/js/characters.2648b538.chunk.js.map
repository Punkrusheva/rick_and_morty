{"version":3,"sources":["components/CharactersListItem/CharactersListItem.js","components/CharactersList/CharactersList.js","views/CharactersView/Characters.js","components/MainLayout/MainLayout.js","components/MainLayout/MainLayout.module.css","components/Logo/Logo.js","components/Logo/Logo.module.css","components/Filter/Filter.js","components/Filter/Filter.module.css","components/PaginationGroup/PaginationGroup.js","services/rick-and-morty-api.js","components/CharactersList/CharactersList.module.css","components/CharactersListItem/CharactersListItem.module.css"],"names":["CharactersListItem","name","id","status","species","gender","onClick","image","className","styles","item","src","alt","defaultProps","CharactersList","characters","characterList","map","console","log","Characters","state","filterSpecies","filterStatus","filterGender","nextPage","prevPage","alert","alertText","changeSpeciesFilter","e","setState","currentTarget","value","changeStatusFilter","changeGenderFilter","getAllCharacters","then","res","results","info","next","prev","prevState","this","getFilteredCharacters","lenth","toast","error","Logo","text","Filter","placeholder","onChange","length","PaginationGroup","onClickPrev","onClickNext","autoClose","Component","Layout","children","layout","title","module","exports","in","appear","classNames","timeout","unmountOnExit","logo","label","type","input","style","display","justifyContent","boxShadow","margin","button_group","variant","color","aria-label","baseURL","a","fetch","ok","Error","json","getAllEpisodes","getEpisodesByName","getAllLocations"],"mappings":"qNAIA,SAASA,EAAT,GAAoF,IAAtDC,EAAqD,EAArDA,KAAMC,EAA+C,EAA/CA,GAAIC,EAA2C,EAA3CA,OAAQC,EAAmC,EAAnCA,QAASC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,QAASC,EAAS,EAATA,MAExE,OAAQ,mCACN,qBAAaC,UAAWC,IAAOC,KAAMJ,QAASA,EAA9C,UACE,qBAAKE,UAAWC,IAAOF,MAAOI,IAAKJ,EAAOK,IAAKX,IAC/C,mBAAGO,UAAWC,IAAOR,KAArB,SAA2B,4BAAG,4BAAIA,QAClC,oBAAGO,UAAWC,IAAOJ,OAArB,UAA6B,wCAA7B,IAA6CA,KAC7C,oBAAGG,UAAWC,IAAON,OAArB,UAA6B,wCAA7B,IAA6CA,KAC7C,oBAAGK,UAAWC,IAAOL,QAArB,UAA8B,yCAA9B,IAA+CA,OALxCF,KAWbF,EAAmBa,aAAe,CAChCV,OAAQ,GACRF,KAAM,GACNG,QAAS,GACTC,OAAQ,GACRE,MAAO,IAYMP,QC/Bf,SAASc,EAAT,GAAyC,IAAfC,EAAc,EAAdA,WAExB,OAAQ,mCACJ,oBAAIP,UAAWC,IAAOO,cAAtB,SACCD,EAAWE,KAAI,gBAAGhB,EAAH,EAAGA,KAAMC,EAAT,EAASA,GAAIC,EAAb,EAAaA,OAAQC,EAArB,EAAqBA,QAASC,EAA9B,EAA8BA,OAAQE,EAAtC,EAAsCA,MAAtC,OACd,cAAC,EAAD,CACEN,KAAMA,EACNC,GAAIA,EAEJC,OAAQA,EACRC,QAASA,EACTC,OAAQA,EACRE,MAAOA,EACPD,QAAS,kBAAMY,QAAQC,IAAI,+BALtBjB,UAcfY,EAAeD,aAAe,CAC5BE,WAAY,IAcCD,Q,gDCtBTM,E,4MACJC,MAAQ,CACNN,WAAY,GACZO,cAAe,GACfC,aAAc,GACdC,aAAc,GACdC,SAAU,GACVC,SAAU,GACVC,OAAO,EACPC,UAAW,I,EAabC,oBAAsB,SAAAC,GACpB,EAAKC,SAAS,CAAET,cAAeQ,EAAEE,cAAcC,S,EAEjDC,mBAAqB,SAAAJ,GACnB,EAAKC,SAAS,CAAER,aAAcO,EAAEE,cAAcC,S,EAEhDE,mBAAqB,SAAAL,GACnB,EAAKC,SAAS,CAAEP,aAAcM,EAAEE,cAAcC,S,uDAjBhD,WAAqB,IAAD,OAClBG,cACGC,MAAK,SAAAC,GAAG,OAAI,EAAKP,SAAS,CACzBhB,WAAYuB,EAAIC,QAChBd,SAAUa,EAAIE,KAAKC,KACnBf,SAAUY,EAAIE,KAAKE,Y,gCAezB,SAAmBC,GAAY,IAAD,SAC0BC,KAAKvB,MAAnDC,EADoB,EACpBA,cAAeC,EADK,EACLA,aAAcC,EADT,EACSA,aACjCmB,EAAUrB,gBAAkBA,GAC9BqB,EAAUpB,eAAiBA,GAC3BoB,EAAUnB,eAAiBA,GAC3BqB,YAAsBvB,EAAeC,EAAcC,GAChDa,MAAK,SAAAC,GAAQpB,QAAQC,IAAImB,EAAIC,SACxBD,EAAIC,QAAQO,MAAQ,OAClBR,EAAIC,UAAYI,EAAU5B,YAE5B,EAAKgB,SAAS,CACZhB,WAAYuB,EAAIC,QAChBd,SAAUa,EAAIE,KAAKC,KACnBf,SAAUY,EAAIE,KAAKE,OAGvBK,IAAMC,MAAM,uB,oBActB,WAAU,IAAD,EAC+EJ,KAAKvB,MAAnFN,EADD,EACCA,WAAYO,EADb,EACaA,cAAeC,EAD5B,EAC4BA,aAAcC,EAD1C,EAC0CA,aAAcE,EADxD,EACwDA,SAAUD,EADlE,EACkEA,SAIzE,OAFAP,QAAQC,IAAIG,EAAeC,EAAcC,GACzCN,QAAQC,IAAIJ,GAEV,eAAC,IAAD,WACE,cAACkC,EAAA,EAAD,CAAMC,KAAK,eACX,cAACC,EAAA,EAAD,CACElB,MAAOX,EACP8B,YAAY,cACZC,SAAUT,KAAKf,sBACjB,cAACsB,EAAA,EAAD,CACElB,MAAOV,EACP6B,YAAY,aACZC,SAAUT,KAAKV,qBACjB,cAACiB,EAAA,EAAD,CACElB,MAAOT,EACP4B,YAAY,aACZC,SAAUT,KAAKT,qBAChBpB,EAAWuC,OAAS,GACnB,cAAC,EAAD,CAAgBvC,WAAYA,IAE9B,cAACwC,EAAA,EAAD,CAAiB7B,SAAUA,EAAUD,SAAUA,EAAU+B,YAAa,kBAAMtC,QAAQC,IAAIO,IAAW+B,YAAa,kBAAMvC,QAAQC,IAAIM,MAClI,cAAC,IAAD,CAAgBiC,UAAW,c,GAtFVC,aA4FVvC,a,qDC/Gf,iCAIA,SAASwC,EAAT,GAA8B,IAAZC,EAAW,EAAXA,SACd,OACE,qBAAKrD,UAAWC,IAAOqD,OAAvB,SACGD,IAITD,EAAO/C,aAAe,CACpBkD,MAAO,GACPF,SAAU,IASGD,O,mBCrBfI,EAAOC,QAAU,CAAC,OAAS,6B,gCCA3B,6CAIA,SAAShB,EAAT,GAAwB,IAARC,EAAO,EAAPA,KACZ,OAAQ,mCACN,cAAC,IAAD,CACEgB,IAAI,EAAMC,QAAQ,EAClBC,WAAW,OACXC,QAAS,IACTC,eAAa,EAJf,SAKE,oBAAI9D,UAAWC,IAAO8D,KAAtB,SAA6BrB,QAKrCD,EAAKpC,aAAe,CAClBqC,KAAM,IAOOD,O,mBCxBfe,EAAOC,QAAU,CAAC,KAAO,qB,gCCAzB,4BAEA,SAASd,EAAT,GAAmD,IAAjClB,EAAgC,EAAhCA,MAAOmB,EAAyB,EAAzBA,YAAaC,EAAY,EAAZA,SACpC,OACE,uBAAO7C,UAAWC,IAAO+D,MAAzB,SACE,uBACEC,KAAK,OACLxC,MAAOA,EACPoB,SAAUA,EACVpD,KAAK,SACLO,UAAWC,IAAOiE,MAClBtB,YAAaA,MAMrBD,EAAOtC,aAAe,CACpBoB,MAAO,IASMkB,O,mBC3Bfa,EAAOC,QAAU,CAAC,MAAQ,sBAAsB,MAAQ,wB,qDCAxD,8CAIA,SAASV,EAAT,GAA2E,IAAhD7B,EAA+C,EAA/CA,SAAUD,EAAqC,EAArCA,SAAU+B,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,YACxD,OAAQ,mCACN,eAAC,IAAD,CAAakB,MAAO,CAAEC,QAAS,OAAQC,eAAgB,SAAUC,UAAW,OAAQC,OAAQ,QAASvE,UAAWC,IAAOuE,aAAcC,QAAQ,YAAYC,MAAM,UAAUC,aAAW,iCAApL,UACKzD,GAAY,cAAC,IAAD,CAAQpB,QAASkD,EAAjB,kBACZ/B,GAAY,cAAC,IAAD,CAAQnB,QAASmD,EAAjB,uBAKvBF,EAAgB1C,aAAe,CAC7Ba,SAAU,GACVD,SAAU,IASG8B,O,4PCzBT6B,EAAU,kCAEHhD,EAAgB,uCAAG,4BAAAiD,EAAA,sEACZC,MAAM,GAAD,OAAIF,EAAJ,eADO,WACxB9C,EADwB,QAGrBiD,GAHqB,sBAItB,IAAIC,MAAM,sDACAlD,EAAInC,SALQ,uBAOjBmC,EAAImD,OAPa,mFAAH,qDAUhB5C,EAAqB,uCAAG,WAAOvB,EAAeC,EAAcC,GAApC,eAAA6D,EAAA,sEACjBC,MAAM,GAAD,OAAIF,EAAJ,+BAAkC9D,EAAlC,mBAA0DC,EAA1D,mBAAiFC,IADrE,WAC7Bc,EAD6B,QAE1BiD,GAF0B,sBAG3B,IAAIC,MAAM,4DACAlD,EAAInC,SAJa,UAMf,IAAhBmC,EAAIC,QAN2B,sBAML,IAAIiD,MAAM,oHACtBlD,EAAInC,SAPa,uBAQtBmC,EAAImD,OARkB,oFAAH,0DA6CrBC,EAAc,uCAAG,4BAAAL,EAAA,sEACVC,MAAM,GAAD,OAAIF,EAAJ,aADK,WACtB9C,EADsB,QAGnBiD,GAHmB,sBAIpB,IAAIC,MAAM,oDACAlD,EAAInC,SALM,uBAOfmC,EAAImD,OAPW,mFAAH,qDASdE,EAAiB,uCAAG,WAAO1F,GAAP,eAAAoF,EAAA,sEACdC,MAAM,GAAD,OAAIF,EAAJ,0BAA6BnF,IADpB,WAC1BqC,EAD0B,QAEtBiD,GAFsB,sBAGvB,IAAIC,MAAM,uDACAlD,EAAInC,SAJS,uBAMlBmC,EAAImD,OANc,mFAAH,sDAUjBG,EAAe,uCAAG,4BAAAP,EAAA,sEACXC,MAAM,GAAD,OAAIF,EAAJ,cADM,WACvB9C,EADuB,QAGpBiD,GAHoB,sBAIrB,IAAIC,MAAM,qDACAlD,EAAInC,SALO,uBAOhBmC,EAAImD,OAPY,mFAAH,sD,mBC3E5BzB,EAAOC,QAAU,CAAC,cAAgB,wC,mBCAlCD,EAAOC,QAAU,CAAC,KAAO,iCAAiC,KAAO,iCAAiC,MAAQ","file":"static/js/characters.2648b538.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './CharactersListItem.module.css';\r\n\r\nfunction CharactersListItem({ name, id, status, species, gender, onClick, image }) {\r\n \r\n  return (<>\r\n    <li key={id} className={styles.item} onClick={onClick}> \r\n      <img className={styles.image} src={image} alt={name}/>\r\n      <p className={styles.name}><b><i>{name}</i></b></p>\r\n      <p className={styles.gender}><b>Gender:</b> {gender}</p>\r\n      <p className={styles.status}><b>Status:</b> {status}</p>\r\n      <p className={styles.species}><b>Species:</b> {species}</p>\r\n    </li>\r\n    </>\r\n  );\r\n};    \r\n\r\nCharactersListItem.defaultProps = {\r\n  status: '',\r\n  name: '',\r\n  species: '',\r\n  gender: '',\r\n  image: '',\r\n};\r\n\r\nCharactersListItem.propTypes = {\r\n  status: PropTypes.string,\r\n  name: PropTypes.string,\r\n  id: PropTypes.number.isRequired,\r\n  species: PropTypes.string,\r\n  gender: PropTypes.string,\r\n  image: PropTypes.string,\r\n};\r\n\r\nexport default CharactersListItem;","import PropTypes from 'prop-types';\r\nimport styles from './CharactersList.module.css';\r\nimport CharactersListItem from \"../CharactersListItem/CharactersListItem\";\r\n\r\nfunction CharactersList({ characters }) {\r\n\r\n  return (<>\r\n      <ul className={styles.characterList}>\r\n      {characters.map(({ name, id, status, species, gender, image }) => (\r\n        <CharactersListItem\r\n          name={name}\r\n          id={id}\r\n          key={id}\r\n          status={status}\r\n          species={species}\r\n          gender={gender}\r\n          image={image}\r\n          onClick={() => console.log('Клик!')}>\r\n        </CharactersListItem>\r\n        ))\r\n      }\r\n      </ul>\r\n    </>\r\n    );\r\n  }\r\n\r\nCharactersList.defaultProps = {\r\n  characters: [],\r\n};\r\n\r\nCharactersList.propTypes = {\r\n  characters: PropTypes.arrayOf(PropTypes.shape({\r\n    id: PropTypes.number.isRequired,\r\n    status: PropTypes.string,\r\n    name: PropTypes.string,\r\n    gender: PropTypes.string,\r\n    image: PropTypes.string\r\n  }\r\n  ))\r\n};\r\n\r\nexport default CharactersList;","import { Component } from 'react';\r\nimport Layout from '../../components/MainLayout/MainLayout';\r\nimport CharactersList from '../../components/CharactersList/CharactersList';\r\nimport Filter from '../../components/Filter/Filter';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport Logo from '../../components/Logo/Logo';\r\nimport PaginationGroup from '../../components/PaginationGroup/PaginationGroup';\r\nimport {\r\n  getAllCharacters,\r\n  //getCharactersBySpecies,\r\n  //getCharactersByStatus,\r\n  //getCharactersByGender,\r\n  //getCharactersById,\r\n  //pagination,\r\n  getFilteredCharacters\r\n} from '../../services/rick-and-morty-api';\r\n\r\nclass Characters extends Component {\r\n  state = {\r\n    characters: [],\r\n    filterSpecies: '',\r\n    filterStatus: '',\r\n    filterGender: '',\r\n    nextPage: '',\r\n    prevPage: '',\r\n    alert: false,\r\n    alertText: '',\r\n  }\r\n\r\n  componentDidMount() {\r\n    getAllCharacters()\r\n      .then(res => this.setState({\r\n        characters: res.results,\r\n        nextPage: res.info.next,\r\n        prevPage: res.info.prev\r\n      })\r\n      );\r\n  }\r\n\r\n  changeSpeciesFilter = e => {\r\n    this.setState({ filterSpecies: e.currentTarget.value });\r\n  };\r\n  changeStatusFilter = e => {\r\n    this.setState({ filterStatus: e.currentTarget.value });\r\n  };\r\n  changeGenderFilter = e => {\r\n    this.setState({ filterGender: e.currentTarget.value });\r\n  };\r\n    \r\n  componentDidUpdate(prevState) {\r\n    const { filterSpecies, filterStatus, filterGender } = this.state;\r\n    if (prevState.filterSpecies !== filterSpecies &&\r\n      prevState.filterStatus !== filterStatus &&\r\n      prevState.filterGender !== filterGender) {\r\n      getFilteredCharacters(filterSpecies, filterStatus, filterGender)\r\n        .then(res => {console.log(res.results);\r\n          if (res.results.lenth > null) {\r\n            if (res.results !== prevState.characters) {\r\n              \r\n              this.setState({\r\n                characters: res.results,\r\n                nextPage: res.info.next,\r\n                prevPage: res.info.prev\r\n              })\r\n            } else { }\r\n            toast.error('Nothing found');\r\n          }\r\n        });\r\n    }\r\n  }\r\n  /*getVisibleCharacters = () => {\r\n    const { characters, filterSpecies, filterStatus, filterGender } = this.state;\r\n    \r\n    const normalizedSpeciesFilter = filterSpecies.toLowerCase().trim();\r\n    return characters.filter(character =>\r\n      character.species.toLowerCase().includes(normalizedSpeciesFilter)\r\n    );\r\n  };*/\r\n\r\n  render() {\r\n    const { characters, filterSpecies, filterStatus, filterGender, prevPage, nextPage } = this.state;\r\n    //const visibleCharacters = this.getVisibleCharacters();\r\n    console.log(filterSpecies, filterStatus, filterGender);\r\n    console.log(characters);\r\n    return (\r\n      <Layout >\r\n        <Logo text='Characters'/>\r\n        <Filter\r\n          value={filterSpecies}\r\n          placeholder='Set species'\r\n          onChange={this.changeSpeciesFilter} />\r\n        <Filter\r\n          value={filterStatus}\r\n          placeholder='Set status'\r\n          onChange={this.changeStatusFilter} />\r\n        <Filter\r\n          value={filterGender}\r\n          placeholder='Set gender'\r\n          onChange={this.changeGenderFilter} />\r\n        {characters.length > 0 &&\r\n          <CharactersList characters={characters} />\r\n        }\r\n        <PaginationGroup prevPage={prevPage} nextPage={nextPage} onClickPrev={() => console.log(prevPage)} onClickNext={() => console.log(nextPage)}/> \r\n        <ToastContainer autoClose={2500} />\r\n      </Layout>\r\n    );\r\n  };\r\n}\r\n\r\nexport default Characters;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './MainLayout.module.css';\r\n\r\nfunction Layout({ children}) {\r\n    return (\r\n      <div className={styles.layout} >\r\n        {children}\r\n      </div>)\r\n}\r\n\r\nLayout.defaultProps = {\r\n  title: '',\r\n  children: '',\r\n};\r\n\r\nLayout.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node,\r\n};\r\n\r\n\r\nexport default Layout;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"layout\":\"MainLayout_layout__Rzm_M\"};","import PropTypes from 'prop-types';\r\nimport styles from './Logo.module.css';\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport \"../../stylesheets/animation.css\";\r\n\r\nfunction Logo ({text}) {\r\n    return (<>\r\n      <CSSTransition\r\n        in={true} appear={true}\r\n        classNames='logo'\r\n        timeout={500}\r\n        unmountOnExit>\r\n        <h1 className={styles.logo}>{text}</h1>\r\n      </CSSTransition>\r\n    </>)\r\n  };\r\n\r\nLogo.defaultProps = {\r\n  text: '',\r\n};\r\n\r\nLogo.propTypes = {\r\n  text: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Logo;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"Logo_logo__2kkPA\"};","import PropTypes from 'prop-types';\r\nimport styles from './Filter.module.css';\r\n\r\nfunction Filter({ value, placeholder, onChange }) {\r\n  return (\r\n    <label className={styles.label}>\r\n      <input\r\n        type='text'\r\n        value={value}\r\n        onChange={onChange}\r\n        name='filter'\r\n        className={styles.input}\r\n        placeholder={placeholder}\r\n      />\r\n    </label>\r\n  )\r\n}\r\n\r\nFilter.defaultProps = {\r\n  value: '',\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  placeholder: PropTypes.string.isRequired,\r\n};\r\n\r\n\r\nexport default Filter; ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__1GkkB\",\"label\":\"Filter_label__3IRTf\"};","import PropTypes from 'prop-types';\r\nimport styles from './PaginationGroup.module.css';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nfunction PaginationGroup ({prevPage, nextPage, onClickPrev, onClickNext}) {\r\n    return (<>\r\n      <ButtonGroup style={{ display: 'flex', justifyContent: 'center', boxShadow: 'none', margin: '10px'}} className={styles.button_group} variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\r\n          {prevPage && <Button onClick={onClickPrev}>Prev</Button>}\r\n          {nextPage && <Button onClick={onClickNext}>Next</Button>}\r\n      </ButtonGroup>\r\n    </>)\r\n  };\r\n\r\nPaginationGroup.defaultProps = {\r\n  prevPage: '',\r\n  nextPage: '',\r\n\r\n};\r\n\r\nPaginationGroup.propTypes = {\r\n  prevPage: PropTypes.string,\r\n  nextPage: PropTypes.string,\r\n};\r\n\r\nexport default PaginationGroup;","const baseURL = 'https://rickandmortyapi.com/api';\r\n \r\nexport const getAllCharacters = async () => {\r\n  const res = await fetch(`${baseURL}/character`);\r\n    \r\n  if (!res.ok) {\r\n    throw new Error(`Could not fetch all characters` +\r\n      `, received ${res.status}`);\r\n  }\r\n  return await res.json();\r\n};\r\n\r\nexport const getFilteredCharacters = async (filterSpecies, filterStatus, filterGender) => {\r\n  const res = await fetch(`${baseURL}/character/?species=${filterSpecies}&status=${filterStatus}&gender=${filterGender}`);\r\n  if (!res.ok) {\r\n    throw new Error(`Could not fetch characters by filter` +\r\n      `, received ${res.status}`);\r\n  }\r\n  if (res.results === 0) {throw new Error(`Ничего не найдено` +\r\n      `, received ${res.status}`);}\r\n  return await res.json()\r\n};\r\n/*\r\nexport const getCharactersBySpecies = async (species) => {\r\n  const res = await fetch(`${baseURL}/character/?species=${species}`);\r\n  if (!res.ok) {\r\n    throw new Error(`Could not fetch characters by species` +\r\n      `, received ${res.status}`);\r\n  }\r\n  return await res.json()\r\n};\r\nexport const getCharactersByStatus = async (status) => {\r\n const res = await fetch(`${baseURL}/character/?status=${status}`);\r\n  if (!res.ok) {\r\n    throw new Error(`Could not fetch characters by status` +\r\n      `, received ${res.status}`);\r\n  }\r\n  return await res.json()\r\n};\r\nexport const getCharactersByGender = async (gender) => {\r\n  const res = await fetch(`${baseURL}/character/?gender=${gender}`);\r\n  if (!res.ok) {\r\n    throw new Error(`Could not fetch characters by gender` +\r\n      `, received ${res.status}`);\r\n  }\r\n  return await res.json()\r\n};*/\r\nexport const getCharactersById = async (id) => {\r\n  const res = await fetch(`${baseURL}/character/${id}`);\r\n  if (!res.ok) {\r\n    throw new Error(`Could not fetch characters by id` +\r\n      `, received ${res.status}`);\r\n  }\r\n  return await res.json()\r\n};\r\n\r\n\r\nexport const getAllEpisodes = async () => {\r\n  const res = await fetch(`${baseURL}/episode`);\r\n    \r\n  if (!res.ok) {\r\n    throw new Error(`Could not fetch all episodes` +\r\n      `, received ${res.status}`);\r\n  }\r\n  return await res.json();\r\n};\r\nexport const getEpisodesByName = async (name) => {\r\n const res = await fetch(`${baseURL}/episode/?name=${name}`);\r\n  if (!res.ok) {\r\n    throw new Error(`Could not fetch episode by name` +\r\n      `, received ${res.status}`);\r\n  }\r\n  return await res.json()\r\n}\r\n\r\n\r\nexport const getAllLocations = async () => {\r\n  const res = await fetch(`${baseURL}/location`);\r\n    \r\n  if (!res.ok) {\r\n    throw new Error(`Could not fetch all locations` +\r\n      `, received ${res.status}`);\r\n  }\r\n  return await res.json();\r\n};\r\nexport const getLocationsByName = async (name) => {\r\n  const res = await fetch(`${baseURL}/location/?name=${name}`);\r\n  if (!res.ok) {\r\n    throw new Error(`Could not fetch location by name` +\r\n      `, received ${res.status}`);\r\n  }\r\n  return await res.json()\r\n}\r\nexport const getLocationsByType = async (type) => {\r\n  const res = await fetch(`${baseURL}/location/?type=${type}`);\r\n  if (!res.ok) {\r\n    throw new Error(`Could not fetch location by type` +\r\n      `, received ${res.status}`);\r\n  }\r\n  return await res.json()\r\n}\r\nexport const getLocationsByDimension = async (dimension) => {\r\n  const res = await fetch(`${baseURL}/location/?dimension=${dimension}`);\r\n  if (!res.ok) {\r\n    throw new Error(`Could not fetch location by dimension` +\r\n      `, received ${res.status}`);\r\n  }\r\n  return await res.json()\r\n}\r\n\r\nexport const pagination = async(link) => {\r\n  const res = await fetch(link)\r\n  if (!res.ok) {\r\n    throw new Error(`Could not fetch` +\r\n      `, received ${res.status}`);\r\n  }\r\n  return await res.json();\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"characterList\":\"CharactersList_characterList__1T0-4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CharactersListItem_item__1iRPq\",\"name\":\"CharactersListItem_name__2OcDM\",\"image\":\"CharactersListItem_image__18aJe\"};"],"sourceRoot":""}